Enhances the functionality of the <a href="https://plugins.jenkins.io/artifactory">Artifactory plugin</a> and adds some project specific wrappers for easier usage.<br/><br/>

<!-- initialize -->

<b><code>initialize</code></b>
<blockquote>
Connects to the Artifactory server and captures build information.<br/><br/>

<p>
<code>credentialsId</code>
<blockquote>
Identifier of the credential that shall be used for login to the Artifactory server.
</blockquote>

<code>release</code>
<blockquote>
Indicates whether the build is a release build or not.
</blockquote>

<code>serverId</code> <i>(optional)</i>
<blockquote>
Internal identifier for the Artifactory server that shall be used for the build.
</blockquote>

<code>serverUrl</code>
<blockquote>
Root URL of the Artifactory server, e.g. <code>https://repo.jfrog.org/artifactory</code>.
</blockquote>
</p>

<i>This method is more or less a shorthand for <a href="#Artifactory"><code>rtServer</code></a> and <a href="#Artifactory"><code>rtBuildInfo</code></a>.</i>
</blockquote>


<!-- isDockerTagAvailable -->

<b><code>isDockerTagAvailable</code></b>
<blockquote>
Returns <code>true</code> if a docker image with the same tag already exists.

<p>
<code>image</code>
<blockquote>
Identifies the name of the Docker image, e.g. <code>mycompany/myimage</code>.
</blockquote>

<code>repository</code>
<blockquote>
Repository (Docker registry) to check for the Docker image and tag.
</blockquote>

<code>tag</code>
<blockquote>
Tag that shall be checked, e.g. <code>1.0.0</code>.
</blockquote>
</p>

<i>This method uses the REST API of Artifactory.</i>
</blockquote>


<!-- isVersionAvailable -->

<b><code>isVersionAvailable</code></b>
<blockquote>
Returns <code>true</code> if an artifact with the same version already exists.

<p>
<code>project</code>
<blockquote>
Identifies the artifact's organization. Levels are separated by dots, e.g. <code>mycompany.myproject</code>.
</blockquote>

<code>module</code>
<blockquote>
Identifies the artifact's module name, e.g. <code>mycomponent</code>.
</blockquote>

<code>repository</code>
<blockquote>
Repository to check for the artifact.
</blockquote>

<code>version</code>
<blockquote>
Exact version string that shall be checked, e.g. <code>1.0.0</code>.
</blockquote>
</p>

<i>This method uses the REST API of Artifactory and ignores classifiers, e.g. <code>module-1.0.txt</code> and <code>module-1.0-classifier.txt</code> are the same.</i>
</blockquote>


<!-- uploadFiles -->

<b><code>uploadFiles</code></b>
<blockquote>
Uploads files to the Artifactory server.

<p>
<code>project</code>
<blockquote>
Identifies the artifact's organization. Levels are separated by dots, e.g. <code>mycompany.myproject</code>.
</blockquote>

<code>module</code>
<blockquote>
Identifies the artifact's module name, e.g. <code>mycomponent</code>.
</blockquote>

<code>classifier</code> <i>(optional)</i>
<blockquote>
Identifies the artifact's classifier to distinguish artifacts that would otherwise have the same name.
</blockquote>

<code>repository</code>
<blockquote>
Repository to upload the artifacts to.
</blockquote>

<code>baseRevision</code>
<blockquote>
Identifies the base revision of the artifact's version, e.g. <code>1.0.0</code>.
</blockquote>

<code>fileSpec</code>
<blockquote>
Specification of the files that shall be uploaded. Check <a href="https://www.jfrog.com/confluence/display/JFROG/Using+File+Specs">this</a> article for more details.
</blockquote>

<code>defaultProps</code> <i>(optional)</i>
<blockquote>
Default properties that shall be applied to all artifacts without an explicit <code>props</code> specification.
</blockquote>
</p>

<i>This method is a wrapper around <a href="#Artifactory"><code>rtUpload</code></a>.</i>
</blockquote>


<!-- publishBuild -->

<b><code>publishBuild</code></b>
<blockquote>
Publishes the build on the Artifactory server.<br/><br/>
<i>This method is a wrapper around <a href="#Artifactory"><code>rtPublishBuildInfo</code></a>.</i>
</blockquote>
